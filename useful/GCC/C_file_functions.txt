//--------------------------------------------------------------------------File Handling in C-----------------------------------------------------------------------//
//-------------------------------------------------------------------------Important Functions-----------------------------------------------------------------------//
#Success == S
#Failure == F
****please add fread and fwrite next time you open this.
$ All the functions are definede in stdio.h,unless said otherwise.

$ FILE fopen("path","mode") 
    |---On S returns address of the file .
    |---On F returns NULL .
    *modes will be discussed in line 23 (may change). 

$ int fclose(FILE *stream)
        |---S Zero(0)
        |---F EOF
        The fclose( ) function closes the file associated with fp, which must be a valid file pointer previously obtained using fopen( ), and
        disassociates the stream from the file. In order to improve efficiency, most file system implementations write data to disk one sector at a
        time. Therefore, data is buffered until a sector's worth of information has been output before the buffer is physically written to disk. When
        you call fclose( ), it automatically writes any information remaining in a partially full buffer to disk. This is often referred to as FLUSHING THE BUFFER.
        You must never call fcJose( ) with an invalid argument. Doing so will damage the file system and possibly cause irretrievable data loss.


$ Modes:
C string containing a file access mode. It can be:
"r"	read: Open file for input operations. The file must exist.

"w"	write: Create an empty file for output operations. If a file with the same name already exists, 
           its contents are discarded and the file is treated as a new empty file.

"a"	append: Open file for output at the end of a file. Output operations always write data at the end of the file, expanding it.
            Repositioning operations (fseek, fsetpos, rewind) are ignored. The file is created if it does not exist.
        
"r+" read/update: Open a file for update (both for input and output). The file must exist.

"w+" write/update: Create an empty file and open it for update (both for input and output).
                   If a file with the same name already exists its contents are discarded and the file is treated as a new empty file.

"a+" append/update: Open a file for update (both for input and output) with all output operations writing data at the end of the file. 
                    Repositioning operations (fseek, fsetpos, rewind) affects the next input operations, but output operations move the position back to the end of file.
                    The file is created if it does not exist.

r+b                 Open a binary file for read/write. You may-also use "rb+".   //more info needed.

w+b                 Create a binary file for readiwrite.'(b~ niily ~iso u~e "wb+".  //more info needed.

a+b                 Append or create a binary file fo~ read/write. You may ~Iso use "ab+".  //more info needed.


$ size_t fread ( void * ptr, size_t size, size_t count, FILE * stream )
          |----The total number of elements successfully read is returned.
                If this number differs from the count parameter, either a reading error occurred or the end-of-file was reached while reading. 
                In both cases, the proper indicator is set, which can be checked with ferror and feof, respectively.
                If either size or count is zero, the function returns zero and both the stream state and the content pointed by ptr remain unchanged.
        .size_t is an unsigned integral type.
        #ptr
                Pointer to a block of memory with a size of at least (size*count) bytes, converted to a void*.
        #size
                Size, in bytes, of each element to be read.
        #count
                Number of elements, each one with a size of size bytes.
        #stream
                Pointer to a FILE object that specifies an input stream. 

$ size_t fwrite ( const void * ptr, size_t size, size_t count, FILE * stream )
          |---The total number of elements successfully written is returned.
              If this number differs from the count parameter, a writing error prevented the function from completing. 
              In this case, the error indicator (ferror) will be set for the stream.
              If either size or count is zero, the function returns zero and the error indicator remains unchanged.
        Writes an array of count elements, each one with a size of size bytes, from the block of memory pointed by ptr to the current position in the stream.
        The position indicator of the stream is advanced by the total number of bytes written.
        Internally, the function interprets the block pointed by ptr as if it was an array of (size*count) elements of type unsigned char, 
        and writes them sequentially to stream as if fputc was called for each byte.



$ int fgetc(FILE* stream)
    	|-S returns ASCII of character
    	|-F returns EOF(-1) [macro defined in stdio.h]
    	reads char by char from a file.

$ void fputc(int char,FILE* stream)
    	|-S returns same character that has been written.
    	|-F returns EOF(-1) [macro defined in stdio.h]
   	writes char by char from a file to the console or another file.

$ char* fgets(char* str,int n, FILE* stream)
        |---S returns the str parameter/arguments
        |---F NULL
        Reads a line from the specified stream and stores it into the string pointed to by str. 
        It stops when either (n-1) characters are read, the newline character is read, or the end-of-file is reached, whichever comes first.
        # RETAINS THE NEW LINE unlike gets.

$ int fputs(const char *str, FILE *stream)
        |---S Non-negetive value
        |---F EOF
        works like puts but for files.
        # DOESNT APPEND A NEW LINE UNLESS GIVEN TO unlike puts.

$ int fprintf(FILE *fp, char *control-string, ... ) ---works exactly like printf.

$ int fscanf(FILE *fp, char *control-string, ... ) ---works exactly like scanf.

$ int feof( FILE *stream )
        |---returns non-zero value if end of file is reached.
        |---F Zero (0)
        |---All possible values for binary files can be read with this.
        This function only reports the stream state as reported by the most recent I/O operation, it does not examine the associated data source. 
        For example, if the most recent I/O was a fgetc, which returned the last byte of a file, feof returns zero. 
        The next fgetc fails and changes the stream state to end-of-file. Only then feof returns non-zero.
        In typical usage, input stream processing stops on any error; feof and ferror are then used to distinguish between different error conditions. 
		
$ int ferror (FILE *stream)
        |---F returns non-zero if ther is an error
        this helps to differentiate between errors and EOF.

$ int fseek(FILE *pointer, long int offset, int position)
        |---S zero
        |---F Non-zero
    pointer: pointer to a FILE object that identifies the stream.
    offset: number of bytes to offset from position
    position: position from where offset is added.Starts with zero.
    position defines the point with respect to which the file pointer needs to be moved. It has three values:
        SEEK_END : It denotes end of the file.
        SEEK_SET : It denotes starting of the file.
        SEEK_CUR : It denotes file pointerâ€™s current position

$ long int ftell(FILE *stream)
    |---This function returns the current value of the position indicator. 
    If an error occurs, -1L is returned, and the global variable errno is set to a positive value.

//--------------------------------------------------------Miscellaneous Functions for Files----------------------------------------------------------------------//

$ int rename(char *oldname, char *newname); 
    |---S 0 ..... ---F Non-zero
    renames the file

$ int remove(char *file-name)
    |---S 0 ..... ---F Non-zero
    erases the file.

$ void rewind (FILE *fp)
    can position a file's current location to the start of the file.
    can be useful to find the file size with ftell.
    It is equivalent to (void)fseek(stream, 0L, SEEK_SET) except that the error indicator for the stream is also cleared.
    fseek() should be preferred over rewind().