---------------------Some Coding Related Stuff----------------------------------------------


$ & (and) ----1 if both are 1
$ | (or) -----1 if any nof them are one
$ ^ (xor) ----1 if both are different
$ ~   --------bitwise NOT
$<<   -------left shift:if shifted one place it doubles 
$>>   -------right shift:if shifted one place it halves

$ (a+b)%m = (a%m  +b%m) %m 

$Converting char numbers to int numbers and vice-versa:
		the ascii code for '0' is 48 .
		so adding or subtracting 48 from the char ascii value or int value will change it.
		Ex:- char a='9'; printf("%d", a-48);  ----will change the '9' to 9(int).
		We can also type cast the char it works the same (remember type casting will change the char to its ascii value.)

$ AND (&) can be used instead of mod (%) operator only for even numbers.
		27 % 2 = 1
    is same as 27 & 1 = 1
	but it doesnt work for 27 & 2 aka ||27 & 2 != 27 % 3|| 

$ Xor can also be used to find odd and even number
	XORing 1 with a even number will increment it by 1 and with an odd number will decrement it by 1
	05 = 101			06 = 110
	01 = 001  			01 = 001
       5^1 = 100 == 4		       6^1 = 111 ==7
	Thus if anumber is odd or even can be determined.

$ XOR can be used to find if an array as only one element whose frequency is one
	basically XOR works in the following way
	0 ^ N = N
	N ^ N = 0 
    and N ^ N ^ B ^ C ^ B =C
  so if an array, arr=[6,7,5,6,7,8,8] has only one element which comes only once or odd number of times then we cant find what that element is.

$Left shifts and Right shifts works as exponential/power of 2.
	for instance, n<<a is equavalent to n* (2^a) 
	e.g 22<<2 --->88
	because shifting one place means addind/deleting one zero at the right-most place in binary.


$"static" keyword:
	Static variables have a property of preserving their value even after they are out of their scope!
	Hence, static variables preserve their previous value in their previous scope and are not initialized again in the new scope.
	*Syntax:
        static data_type var_name = var_value; 


$ to_upper and to_lower using & and | :
			to change ASCII char to upper simply do char & 95
			to change ASCII char to lower simply do char | 32


$Easily print strings:
	typedef char* string;
	string str="some text";
	print(str)
		  |----no need to use %s


$Structure memory consumption:
	||ALWAYS DECLARE THE MEMBER OF A STRUCTURE IN ASCENDING ORDER BY SIZE ie DECLARE CHAR,INT,POINTER,FLOAT,DOUBLE,ARRAY etc IN THAT ORDER TO SAVE MEMORY.||

	suppose a structure struct emp{
									char a; int l; double b;} will consume 16 bytes.
		Again struct red{
							int b; char t; double f;} although having the same members it will consume 24 bytes.
		for emp char takes one byte then for padding 3 byte is consumed then int takes 4 bytes.next double takes 8.
		for red however int takes 4 and padds 4 more then char takes 1 and padds 7 and last double taking 8 makes the whole size 24 bytes.

		struct green {
						chara,b,c;int rt,rty;double ty;} will also have 16 bytes of memory.

$printf return type:
	int x =2020 ; printf("%d",printf("%d",printf("%d ",x)));
							|-------the output will be 2020 51
		The inner most printf prints 2020 on the screen then 2nd inner printf prints how many characters have been successfully printed which is 5 including one blank.
		And the last printf prints 1 because only one charcter (4) have been printed.

$scanf return type:
	scanf returns total number of Inputs Scanned successfully, or EOF if input failure occurs before the first receiving argument was assigned.
	Also,scanf() function returns 1 if it is scanning 1 item,returns 2 if it is scanning 2 inputs, returns for scanning 3 inputs.
	Like,printf("%d",scanf("%s %f")); 
							|------will print out 2 as it has successfully taken two inputs.

$Scanf and char input:
	taking char input in scanf is a bitch.
	if using more than one consecutive scanfs (like in a loop), 
	use scanf(' %c',&a); because when the user presses enter or \n it being a character,
	it stays in the buffer and scanf takes that \n as its input.
	BEWARE!! 

$ pointers paased as an argument for a function:
	Remember when we initialize a func parameter we it creates a local var for the function .
	And then copies the argument and places it in that local variable.
	This also applies for pointers.
	For instance, func(int* h){*h = (*h) * 5;}
	main()
	{int *p;
	func(p); -----------------here p is the argument and above h is the parameter.
	return 0;}
	In this instance p and h is not the same thing.



							

	
