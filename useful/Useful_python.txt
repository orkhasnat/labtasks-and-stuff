------------------------------PYTHON 3--------------------------------------------------------------

1.List Comprehension:
        mystr="word"
        mylist=[]
    for i in mystr:
        mylist.append(i)
					      _(any expression like i*i or other things)
    Rather using this we can use this,       |              
				     mylist=[i for i in mystr/"word" ]
				    # output will be -mylist=['w','o','r','d']
				 
				 also can add if statements, if-else statements and many other things..
				 mylist=[i for i in "word" if i=="o"]
    			
                                                    ----------this is called list comprehension

  

2.*args in functions:
	
	 def myfunc(*args):
		return sum(*args)	
					-----------args keyword makes the parameter a tuple taking as many as I want
						   dont need to use args, can be anything but the *asterisk is necessary						   used when dont know how many parameters the function needs to take

	 myfunc(10,20,15,4,5,87.........)




3.Taking Inputs:

	a,b,c = map(int,input().split()
		|    |---------|-------------------any functions 
		|	       |-----------------------any iterators
	        |----map functions use
	
	a=input().split() --------------takes input as a string and then splits the string word by word depicted by split() method creating a list
	a=list(map(int,a))--------if a string of integers needed to be converted into a list of integers                  |--empty means space, can use anyother chars even strings 
     or,a=[int(i) for i in a]	----another method of doing the thing stated just above this line




4.Tuple:
	
   Tuples are kind of like lists but they are not modifiable. Tuples use paenthesis.
   Ex:- t=(9,'m',56,8.26,'m')
	t.count('m') --> 2
	   |---very useful	

5.Set:
 
 cannot have the same elemnt more than once
	mylist=[1,2,3,4,3,2,5,4,3,4,2,3,4,5,5,5,6]
	set(mylist) ----> {1,2,3,4,5,6}

7.Dictionary:
	dict.keys()
	dict.values()
	dict.items()

8.Slicing:
	
	mystring[start:end:step]

 @@reversing string in one line: string[::-1]

9.String formatting using {}.format() and f string literals:
	
	@@fstringliterals:-
			    print(f'My name is {name} and I am {age} years old.')
	
	@@{}.format:-  //often better choice
	
			
		print('{} {}'.format("one", "two" )) 

        @@float formatting :
		print( float("{:.2f}".format(x))) -------> if x = 3.1415 then it will turn into x= 3.14
			|        |----------------------how much precision we want aka rounding upto how many places after decimal 
			|-----------if float() not used then it will return a string 































