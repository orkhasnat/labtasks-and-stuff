# -*- coding: utf-8 -*-
"""Tasnimul Hasnat 190041113 - Math_4642_L4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y6m-LunQ5HglmQ1oRFcxkI33ZD-48_79

# **Lab 4 : Linear Regression**<br>

Regression is the process of estimating a model that produces the best fit for the given data. **Linear Regression** is the simplest and most popular among them. A linear regression model is given by y = a<sub>0</sub> + a<sub>1</sub>x, where a<sub>0</sub> and a<sub>1</sub> are the parameters of the regression model. The values of these two parameters should be such that the produced result of (a<sub>0</sub> + a<sub>1</sub>x) should have the least deviation from the actual result. In order to measure how well our model fits the data or whether it deviates from the actual result, we use the least square criterion.

In today's lab, we will be implementing Linear Regression in python. Note that there might be built-in functions for linear regression in python, but the purpose of this lab is to understand how linear regression actually works, and hence those built-in functions are not allowed. To test our implementation, we will be using the same data that is available in the first example of our class lecture pdf. That way, you can check whether your implementation is working correctly by comparing with the results obtained in that example. Run the following cell to load the known data points:
"""

theta = [0.698132, 0.959931, 1.134464, 1.570796, 1.919862]
torque = [0.188224, 0.209138, 0.230052, 0.250965, 0.313707]

"""##Task 1
Assuming that the linear regression model for the given data is defined as Torque = a<sub>0</sub> + a<sub>1</sub>*Theta, write a function that takes the given data as input and returns the regression parameters a<sub>0</sub> and a<sub>1</sub>.
"""

def LinearRegression(theta, torque):
    n = len(theta)
    sum_theta = sum(theta)
    sum_torque = sum(torque)
    sum_theta_sq = sum(theta[i] * theta[i] for i in range(n))
    sum_theta_torque = sum(theta[i] * torque[i] for i in range(n))
    
    a1 = (n * sum_theta_torque - sum_theta * sum_torque) / (n * sum_theta_sq - sum_theta * sum_theta)
    a0 = (sum_torque - a1 * sum_theta) / n
    
    return a0, a1

"""##Task 2
Write another function that takes any arbitrary value as input and applies the regression model to generate the output. 
"""

def calculate(x):
    a0, a1 = LinearRegression(theta, torque)
    res = a0 + a1 * x
    return res

print(calculate(0.75))

"""##Task 3
Generate a plot of the regression curve using the model you just produced. Show the original data points (theta, torque) on the same plot using scatter plot. Use different colors for the regression curve and the original data points and show a legend. For this task, you are allowed to use various libraries such as matplotlib.
"""

#Write your code here for generating the plot

import matplotlib.pyplot as plt
import numpy as np

# Compute the regression curve
a0, a1 = LinearRegression(theta, torque)
x = np.array(theta)
y = a0 + a1 * x

# Plot the data points and regression curve
plt.scatter(theta, torque, c='red', label='Data points')
plt.plot(x, y, c='blue', label='Regression curve')
plt.xlabel('Theta')
plt.ylabel('Torque')
plt.legend()
plt.show()